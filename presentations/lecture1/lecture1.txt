TITLE Complexity Theory\textemdash  Lecture 1: Introduction

DEF "In a nutshell" how to classify \textit{\textbf{problems}} according to how \textit{\textbf{hard}} they are to solve by computer \textit{\textbf{programs}}.

DEF "In this video" we define ``problem'', ``hard'', and ``program'' mathematically so that we can prove stuff.

- What is a \textit{\textbf{problem}}?

\textbf{Instance} ; > vs ; > \textbf{General case}
$37\times 13$ ; ; > Multiplication
$8,2,3,6,1$ ; ; > Sorting

- A \textit{\textbf{problem}} is a \textbf{function} mapping each instance to its solution.

FLUSH 4

\textbf{Problem} ; ; > \textbf{Instance} ; ; > \textbf{Solution}
Multiplication ; ; >$37\times 13$ ; >$\longrightarrow$ ; >$481$
>Sorting ; ; > $8,2,3,6,1$ ;  >$\longrightarrow$ ; > $1,2,3,6,8$
Median ; ; > $8,2,3,6,1$ ;  $\longrightarrow$ ; > $3$

- We focus on \textit{\textbf{decision problems}}: problems where the solution is YES$/$NO.
FLUSH 8
\textbf{Decision Problem} ; ; > \textbf{Instance} ; ; > \textbf{Solution}
Prime testing ; ; $9$ ; >$\longrightarrow$ ; > NO
;; >$11$; >$\longrightarrow$; >YES
DEF "In general" a decision problem asks ``does the instance have $X$ property?''
- We assume that the instance is just a (finite) \textbf{binary string}.
FLUSH 14
Mathematical object ; >vs ; >Binary representation
[[Drawing of a graph, a polygon, and a picture]]

How to encode any input in binary:
- Any mathematical object can be written as a sequence of symbols from a finite set of symbols
[[Edge list of the graph, list of points of the polygon]]

1. Assign a unique binary string of the same length to each symbol.
2. Concatenate the binary strings of each symbol into a single binary string.
[[continue edge list example]]

Recap: a decision problem is a mapping from the set of all binary strings to Yes/No.

[[Diagram:
All binary strings
- Not valid encodings ---> No
- Valid encodings of instances that do not have the property ---> No
- Valid encodings of instances that have the property ---> Yes]]

Remarks:
- the number of inputs is infinite, but each input must be finite. We cannot have arbitrary real numbers as input!
- Each unique mapping from binary strings to Yes/No represents a different problem, even though most of those are meaningless to humans.
- Two problems can initially be stated differently, but turn out to be the same if they have the same mapping.
E.g., "Is this graph a tree?" and "Is this graph connected and with one less edge than nodes?" ((need better example here))


What is a program?

A (finite) list of instructions that a computer can execute.

What is a computer?

Note: this is just one way to define computers. There are variations (what we call computational models), but the differences are not important because all the "reasonable" computational models are "equivalent". ((come back to this point at the end and given an example of how this is equivalent to a model that also has registers))

- Memory: unlimited numbler of storage cells. Each can hold natural numbers arbitrarily large.
- A set of instructions that programs can use

Instructions:
a) To modify the memory:
e.g. M[2] = M[3], M[1] = 3+M[4]

Operations: +,-,*,/,%
Operands:
- constants
- memory positions with constant indices
- memory positions with other memory positions as indices (e.g., M[M[3]])
This is called indirect access, and without it we could only reach a constant number of cells.

b) To change the "control flow"
if M[1] == M[2] goto instruction 3

Conditions: ==, !=, <, <=, >, >=

c) To finish: output Yes/No

------------

A computer can execute any program on any input.
- The input is placed at M[0] (with a 1 in front).
(otherwise inputs 0101 and 00101 would be mixed)
- The computer starts executing the first intruction, and goes in order.
- Each instruction takes one unit of time.
- The computer can hang but it never crashes (we allow negative indices for memory)
e.g.
1: M[3] = 0
2: M[3] = M[3]+1
3: if M[3] > 0 goto instruction 2


- A program decides (solves) a decision problem P if it outputs "yes" when executed with inputs that have the property P and "no" otherwise.
- A program recognizes a decision problem if it outputs "yes" for inputs that have the property and outputs "no" or hangs for inputs that don't.

- A problem is decidable if there exists a program that decides it.
- A problem is recognizable if there exists a program that recognizes it.

This series:

Part 1. Decidability theory
- There exist unrecognizable problems.
- There exist undecidable but recognizable problems.

Part 2. Complexity theory
- Complexity classes: how to classify decidable problems according to how much time and space is needed to solve them.
